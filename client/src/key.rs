use core::fmt;

#[derive(Clone, Copy)]
pub enum Key {
  UP,
  DOWN,
  LEFT,
  RIGHT,
  Q,
  W,
  E,
  R,
  T,
  Y,
  U,
  I,
  O,
  P,
  A,
  S,
  D,
  F,
  G,
  H,
  J,
  K,
  L,
  Z,
  X,
  C,
  V,
  B,
  N,
  M,
  COMMA,
  PERIOD,
  SLASH,
  SEMICOLON,
  APOSTROPHE,
  LBRACKET,
  RBRACKET,
  MINUS,
  EQUAL,
  ONE,
  TWO,
  THREE,
  FOUR,
  FIVE,
  SIX,
  SEVEN,
  EIGHT,
  NINE,
  ZERO,
}

impl Key {
  fn string_val(self) -> String {
    match self {
      Key::UP => "UP",
      Key::DOWN => "DOWN",
      Key::LEFT => "LEFT",
      Key::RIGHT => "RIGHT",
      Key::Q => "Q",
      Key::W => "W",
      Key::E => "E",
      Key::R => "R",
      Key::T => "T",
      Key::Y => "Y",
      Key::U => "U",
      Key::I => "I",
      Key::O => "O",
      Key::P => "P",
      Key::A => "A",
      Key::S => "S",
      Key::D => "D",
      Key::F => "F",
      Key::G => "G",
      Key::H => "H",
      Key::J => "J",
      Key::K => "K",
      Key::L => "L",
      Key::Z => "Z",
      Key::X => "X",
      Key::C => "C",
      Key::V => "V",
      Key::B => "B",
      Key::N => "N",
      Key::M => "M",
      Key::COMMA => ",",
      Key::PERIOD => ".",
      Key::SLASH => "/",
      Key::SEMICOLON => ";",
      Key::APOSTROPHE => "'",
      Key::LBRACKET => "[",
      Key::RBRACKET => "]",
      Key::MINUS => "-",
      Key::EQUAL => "=",
      Key::ONE => "1",
      Key::TWO => "2",
      Key::THREE => "3",
      Key::FOUR => "4",
      Key::FIVE => "5",
      Key::SIX => "6",
      Key::SEVEN => "7",
      Key::EIGHT => "8",
      Key::NINE => "9",
      Key::ZERO => "0",
    }.to_string()
  }

  pub fn from_string(val: &String) -> Self {
    match val.as_str() {
      "UP" => Key::UP,
      "DOWN" => Key::DOWN,
      "LEFT" => Key::LEFT,
      "RIGHT" => Key::RIGHT,
      "Q" => Key::Q,
      "W" => Key::W,
      "E" => Key::E,
      "R" => Key::R,
      "T" => Key::T,
      "Y" => Key::Y,
      "U" => Key::U,
      "I" => Key::I,
      "O" => Key::O,
      "P" => Key::P,
      "A" => Key::A,
      "S" => Key::S,
      "D" => Key::D,
      "F" => Key::F,
      "G" => Key::G,
      "H" => Key::H,
      "J" => Key::J,
      "K" => Key::K,
      "L" => Key::L,
      "Z" => Key::Z,
      "X" => Key::X,
      "C" => Key::C,
      "V" => Key::V,
      "B" => Key::B,
      "N" => Key::N,
      "M" => Key::M,
      "," => Key::COMMA,
      "." => Key::PERIOD,
      "/" => Key::SLASH,
      ";" => Key::SEMICOLON,
      "'" => Key::APOSTROPHE,
      "[" => Key::LBRACKET,
      "]" => Key::RBRACKET,
      "-" => Key::MINUS,
      "=" => Key::EQUAL,
      "1" => Key::ONE,
      "2" => Key::TWO,
      "3" => Key::THREE,
      "4" => Key::FOUR,
      "5" => Key::FIVE,
      "6" => Key::SIX,
      "7" => Key::SEVEN,
      "8" => Key::EIGHT,
      "9" => Key::NINE,
      "0" => Key::ZERO,
      _ => panic!("Unknown key: {}", val),
    }
  }
}

impl fmt::Display for Key {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    write!(f, "{}", self.string_val())
  }
}